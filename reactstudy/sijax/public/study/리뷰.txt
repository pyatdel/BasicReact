개발 환경 도구

React: JavaScript UI 라이브러리/프레임워크
Node.js: JavaScript 런타임 환경
nvm: Node 버전 관리자
npm: Node 패키지 관리자
npx: 패키지 일회성 실행 도구

JavaScript 기초

데이터 타입
javascriptCopy// 원시타입: 복사
let a = 1;
let b = a; // 값 복사

// 객체타입: 참조
let obj1 = {name: 'Kim'};
let obj2 = obj1; // 참조 복사

Wrapper 객체: 원시타입에 메서드 사용 가능하게 해줌
JSON 접근: object['propertyName'] vs object.propertyName

//______________________________________1023

React State & Events
javascriptCopy// 반응형 변수 선언
const [value, setValue] = useState(initialValue);

// 이벤트 처리
event.stopPropagation(); // 이벤트 버블링 중단
event.preventDefault();  // 기본 동작 방지
JSX 문법
javascriptCopy// 컴포넌트 생성 (rfce/rafce 스니펫)
function Component() {
  return (
    <div>
      <h1>Hello React</h1>
    </div>
  );
}

//______________________________________1024

폼 제어
javascriptCopy// 폼 제출 메서드 차이
form.requestSubmit(); // 유효성 검사 실행
form.submit();       // 직접 제출

// 입력 제어
<input readOnly />  // 읽기전용, 전송됨
<input disabled /> // 비활성화, 전송안됨
이벤트 타겟
javascriptCopy// 이벤트 대상
event.target         // 실제 이벤트 발생 요소
event.currentTarget  // 이벤트 핸들러가 바인딩된 요소

css 선택자를 이용한 select 변칙 테크닉 [jc] 잘 쓰면 아주 있어 보임(단순한 규칙이 아닌, 변칙 테크닉)

//______________________________________1025
localStorage
javascriptCopy// 데이터 저장
localStorage.setItem('key', JSON.stringify(data));

// 데이터 읽기
const data = JSON.parse(localStorage.getItem('key'));
배열 메서드
javascriptCopy// 배열 조작
str.split(',');  // 문자열을 배열로
arr.splice(1, 2); // 인덱스 1부터 2개 요소 제거

// URL 파라미터 처리
location.search  // URL의 쿼리스트링 부분

//______________________________________1028
정렬 알고리즘
javascriptCopy// 배열 정렬
array.sort((a, b) => a - b); // 오름차순 정렬

// 객체 복사
const clone = structuredClone(obj); // 깊은 복사
const copy = {...obj};             // 얕은 복사
CSS 선택자
cssCopy/* 선택자 관계 */
.parent > .child  /* 직계 자식 */
.parent .descendant /* 모든 자손 */

//______________________________________1029

Ajax 기초
javascriptCopy// XMLHttpRequest 사용
const xhr = new XMLHttpRequest();
xhr.open('GET', 'url', true); // 비동기 요청
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    // 응답 처리
  }
};
DOM 탐색
javascriptCopy// 상위 요소 찾기
element.closest('div'); // 가장 가까운 div 상위 요소

검색과 페이지 기능 같이 하려면 검색어를 어떻게든 끌고 다녀야 함
>> 이걸 안하면, 첫 페이지만 검색된다



//1030_____________________________________

Promise와 async/await
javascriptCopy// Promise 사용
fetch('url')
  .then(response => response.json())
  .then(data => console.log(data));

// async/await
async function getData() {
  const response = await fetch('url');
  const data = await response.json();
  return data;
}
Axios
javascriptCopy// Axios 요청
axios.get('url')
  .then(response => console.log(response.data))
  .catch(error => console.error(error));

// async/await와 함께 사용
async function fetchData() {
  try {
    const response = await axios.get('url');
    return response.data;
  } catch (error) {
    console.error(error);
  }
}
//______________________________________1031

크로스오리진(CORS)

3요소: 포트/프로토콜/도메인명
same-origin 정책으로 인한 Ajax 제약
서버 우회 방식으로 해결 가능


jQuery 핵심

html/on 메서드
읽기: 매개변수 없음
전체쓰기: 매개변수 문자열
선택적쓰기: 콜백함수
메서드 체이닝
prototype



11월 1일 학습내용

REST/RESTful 개념

GET: 조회(select)
POST: 생성(insert)
PUT: 수정(update)
DELETE: 삭제(delete)


개발 도구

json-server
faker-js (더미데이터)


fetch API

장점: 라이브러리 불필요
단점: then 체이닝 필요


웹 개발 진화
CopyREST/RESTful + Ajax 
=> SPA 
=> Frontend Framework

//______________________________________1101

웹 개발 발전 흐름
CopyREST/RESTful + Ajax 
=> SPA(Single Page Application)
=> Frontend Framework(React, Vue, Angular)

REST API 메소드

GET: 조회(select) - 리스트/개별
POST: 생성(insert)
PUT: 수정(update)
DELETE: 삭제(delete)


개발 도구

json-server: REST API 테스트용
faker-js: 더미데이터 생성기

자바버전도 존재 (한국어 지원 강화)




fetch API

장점: 별도 라이브러리 불필요
단점: then 체이닝 필요

javascriptCopyfetch('/api/data')
  .then(res => res.json())
  .then(data => console.log(data))

  //______________________________________1104

무한스크롤 -> window / div  
          scrollTop, clientHeight, scrollHeight
          setTimeout(() =>{
            window.scrollTo(x,y)
          }, 30)

chart.js -> new 왼쪽에 변수 값을 주어서 받으면, 설정 옵션 객체에 접근/쓰기가 가능
          -> update() 리 - 렌더링, 값을 주면, 다시 그려야 함

aggrid -> 요즘 시대가 원하는 grid, 성능이 best

==> 너무 미루면, 머리에 흔적도 남지 않으니.. 하루빨리 공부하기
    그래야 질문이 나옴, 아예 모르면 질문도 할 수 없음