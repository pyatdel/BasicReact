개발 환경 도구

React: JavaScript UI 라이브러리/프레임워크
Node.js: JavaScript 런타임 환경
nvm: Node 버전 관리자
npm: Node 패키지 관리자
npx: 패키지 일회성 실행 도구

JavaScript 기초

데이터 타입
 원시타입: 복사
let a = 1;
let b = a; // 값 복사

// 객체타입: 참조
let obj1 = {name: 'Kim'};
let obj2 = obj1; // 참조 복사

Wrapper 객체: 원시타입에 메서드 사용 가능하게 해줌
JSON 접근: object['propertyName'] vs object.propertyName

//______________________________________1023

React State & Events
// 반응형 변수 선언
const [value, setValue] = useState(initialValue);

// 이벤트 처리
event.stopPropagation(); // 이벤트 버블링 중단
event.preventDefault();  // 기본 동작 방지
JSX 문법
// 컴포넌트 생성 (rfce/rafce 스니펫)
function Component() {
  return (
    <div>
      <h1>Hello React</h1>
    </div>
  );
}

//______________________________________1024

폼 제어
// 폼 제출 메서드 차이
form.requestSubmit(); // 유효성 검사 실행
form.submit();       // 직접 제출

// 입력 제어
<input readOnly />  // 읽기전용, 전송됨
<input disabled /> // 비활성화, 전송안됨
이벤트 타겟
// 이벤트 대상
event.target         // 실제 이벤트 발생 요소
event.currentTarget  // 이벤트 핸들러가 바인딩된 요소

css 선택자를 이용한 select 변칙 테크닉 [jc] 잘 쓰면 아주 있어 보임(단순한 규칙이 아닌, 변칙 테크닉)

//______________________________________1025
localStorage
javascriptCopy// 데이터 저장
localStorage.setItem('key', JSON.stringify(data));

// 데이터 읽기
const data = JSON.parse(localStorage.getItem('key'));
배열 메서드
// 배열 조작
str.split(',');  // 문자열을 배열로
arr.splice(1, 2); // 인덱스 1부터 2개 요소 제거

// URL 파라미터 처리
location.search  // URL의 쿼리스트링 부분

//______________________________________1028
정렬 알고리즘
// 배열 정렬
array.sort((a, b) => a - b); // 오름차순 정렬

// 객체 복사
const clone = structuredClone(obj); // 깊은 복사
const copy = {...obj};             // 얕은 복사
CSS 선택자
/* 선택자 관계 */
.parent > .child  /* 직계 자식 */
.parent .descendant /* 모든 자손 */

//______________________________________1029

Ajax 기초
// XMLHttpRequest 사용
const xhr = new XMLHttpRequest();
xhr.open('GET', 'url', true); // 비동기 요청
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    // 응답 처리
  }
};
DOM 탐색
// 상위 요소 찾기
element.closest('div'); // 가장 가까운 div 상위 요소

검색과 페이지 기능 같이 하려면 검색어를 어떻게든 끌고 다녀야 함
>> 이걸 안하면, 첫 페이지만 검색된다



//1030_____________________________________

Promise와 async/await
// Promise 사용
fetch('url')
  .then(response => response.json())
  .then(data => console.log(data));

// async/await
async function getData() {
  const response = await fetch('url');
  const data = await response.json();
  return data;
}
Axios
y// Axios 요청
axios.get('url')
  .then(response => console.log(response.data))
  .catch(error => console.error(error));

// async/await와 함께 사용
async function fetchData() {
  try {
    const response = await axios.get('url');
    return response.data;
  } catch (error) {
    console.error(error);
  }
}
//______________________________________1031

크로스오리진(CORS)

3요소: 포트/프로토콜/도메인명
same-origin 정책으로 인한 Ajax 제약
서버 우회 방식으로 해결 가능


jQuery 핵심

html/on 메서드
읽기: 매개변수 없음
전체쓰기: 매개변수 문자열
선택적쓰기: 콜백함수
메서드 체이닝
prototype



11월 1일 학습내용

REST/RESTful 개념

GET: 조회(select)
POST: 생성(insert)
PUT: 수정(update)
DELETE: 삭제(delete)


개발 도구

json-server
faker-js (더미데이터)


fetch API

장점: 라이브러리 불필요
단점: then 체이닝 필요


웹 개발 진화
CopyREST/RESTful + Ajax 
=> SPA 
=> Frontend Framework

//______________________________________1101

웹 개발 발전 흐름
REST/RESTful + Ajax 
=> SPA(Single Page Application)
=> Frontend Framework(React, Vue, Angular)

REST API 메소드

GET: 조회(select) - 리스트/개별
POST: 생성(insert)
PUT: 수정(update)
DELETE: 삭제(delete)


개발 도구

json-server: REST API 테스트용
faker-js: 더미데이터 생성기

자바버전도 존재 (한국어 지원 강화)




fetch API

장점: 별도 라이브러리 불필요
단점: then 체이닝 필요

javascriptCopyfetch('/api/data')
  .then(res => res.json())
  .then(data => console.log(data))

  //______________________________________1104

// 1. Window 기반 무한 스크롤
window.addEventListener('scroll', function() {
    let scrollTop = window.scrollY || document.documentElement.scrollTop;
    let windowHeight = window.innerHeight;
    let documentHeight = document.documentElement.scrollHeight;
    
    if (scrollTop + windowHeight >= documentHeight - 50) {
        // 데이터 로드
    }
});

// 2. Div 기반 무한 스크롤
const element = document.querySelector('#scrollDiv');
element.addEventListener('scroll', function() {
    let scrollTop = element.scrollTop;
    let clientHeight = element.clientHeight;
    let scrollHeight = element.scrollHeight;
    
    if (scrollTop + clientHeight >= scrollHeight - 50) {
        // 데이터 로드
    }
});

// 특정 위치로 스크롤 이동
// 차트 생성
const myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: ['Red', 'Blue', 'Yellow'],
        datasets: [{
            label: '# of Votes',
            data: [12, 19, 3]
        }]
    }
});

// 차트 업데이트
myChart.data.datasets[0].data = [20, 30, 40];
myChart.update(); // 리렌더링 필수!

// 설정 옵션 접근/수정
myChart.options.plugins.title.text = "새로운 제목";
myChart.update();

AG Grid 특징:
// AG Grid 기본 설정 예시
const gridOptions = {
    // 열 정의
    columnDefs: [
        { field: 'name' },
        { field: 'age' }
    ],
    // 행 데이터
    rowData: [
        { name: '홍길동', age: 25 },
        { name: '김철수', age: 30 }
    ],
    // 주요 장점들:
    // - 빠른 성능 (대용량 데이터 처리)
    // - 다양한 기능 내장 (정렬, 필터링, 그룹핑 등)
    // - 커스터마이징 용이
    // - 엔터프라이즈급 기능 제공
};

학습 전략:
1. 실습 우선
   - 이론만 보지 말고 직접 코드 작성
   - 작은 프로젝트라도 실제 구현해보기

2. 단계적 학습
   - 기본 기능 구현부터 시작
   - 점진적으로 고급 기능 추가

3. 질문 준비
   - 기본 개념 이해가 질문의 시작
   - "이게 왜 안될까?" → 구체적인 질문 가능

4. 즉시 실행
   - 배운 내용 미루지 않기
   - 당일 학습 당일 복습