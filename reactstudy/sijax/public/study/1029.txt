JavaScript의 메모리 구조와 비동기 프로그래밍
1. JavaScript 메모리 구조
1.1 Stack 메모리

원시 타입 데이터 저장
함수 호출 스택 관리
고정된 크기의 메모리 할당

javascriptCopyfunction example() {
    const number = 42;        // Stack에 저장
    const string = "Hello";   // Stack에 저장
    return number;            // return 후에도 값 유지 가능
}
1.2 Heap 메모리

참조 타입 데이터 저장
동적 메모리 할당
객체, 배열, 함수 등 저장

javascriptCopyconst person = {             // 참조는 Stack에, 객체는 Heap에 저장
    name: "John",
    age: 30
};
2. 비동기 프로그래밍의 진화
2.1 콜백 패턴 (초기)
javascriptCopy$.ajax({
    url: 'api/data',
    success: function(result) {
        $.ajax({
            url: 'api/data2',
            success: function(result2) {
                $.ajax({
                    url: 'api/data3',
                    success: function(result3) {
                        // Callback Hell 발생
                    }
                });
            }
        });
    }
});
2.2 Promise 패턴

Bluebird 회사가 개발
콜백 지옥 해결 시도
then-catch 체인 방식

javascriptCopyfetch('api/data')
    .then(response => response.json())
    .then(data => processData(data))
    .catch(error => console.error(error))
    .finally(() => {
        // 성공/실패 상관없이 실행
        console.log('작업 완료');
    });
Promise의 특징

비동기 작업용 설계
일반 코드와 함께 사용시 이점 없음
then 체인의 한계 존재

2.3 Async/Await 패턴

가장 현대적인 비동기 처리 방식
동기 코드처럼 작성 가능

javascriptCopyasync function getData() {
    try {
        const response = await fetch('api/data');
        const data = await response.json();
        return data;
    } catch (error) {
        console.error(error);
    }
}
제한사항

async 키워드는 함수에서만 사용 가능
await는 async 함수 내부에서만 사용 가능

3. CDN (Content Delivery Network)
3.1 CDN의 역할

라이브러리 외부 호스팅
빠른 로딩 속도
서버 부하 감소

3.2 사용 예시
htmlCopy<!-- jQuery CDN 사용 예시 -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap CDN 사용 예시 -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" 
      rel="stylesheet">
3.3 CDN 장점

글로벌 접근성 향상
캐싱 효과
버전 관리 용이
대역폭 비용 절감

3.4 주의사항

CDN 서버 장애 시 영향
보안 고려 필요 (HTTPS 사용)
적절한 폴백(fallback) 처리 필요

JavaScript는 Stack과 Heap 메모리를 사용하여 데이터를 관리하고, 
비동기 프로그래밍은 콜백 패턴에서 Promise를 거쳐 Async/Await로 발전했으며, 
CDN을 통해 외부 라이브러리를 효율적으로 로딩할 수 있습니다.