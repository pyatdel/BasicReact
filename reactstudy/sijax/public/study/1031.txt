Ajax (Asynchronous JavaScript and XML)
javascript

Copy
// 기본적인 Ajax 요청 예제
fetch('/api/users')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// POST 요청 예제
fetch('/api/users', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'John Doe',
    email: 'john@example.com'
  })
});
JSON 변환 도구
javascript

Copy
// Jackson (Java)
@RestController
public class UserController {
    @GetMapping("/users")
    public User getUser() {
        User user = new User("John", 25);
        return user; // Jackson이 자동으로 JSON으로 변환
    }
}

// Gson (Java)
Gson gson = new Gson();
String json = gson.toJson(user);
User user = gson.fromJson(jsonString, User.class);
REST API 메소드
javascript

Copy
// GET - 조회
fetch('/api/users/1')

// POST - 생성
fetch('/api/users', {
  method: 'POST',
  body: JSON.stringify(userData)
})

// PUT - 수정
fetch('/api/users/1', {
  method: 'PUT',
  body: JSON.stringify(updatedData)
})

// DELETE - 삭제
fetch('/api/users/1', {
  method: 'DELETE'
})
form과 Ajax 비교
html

Copy
<!-- Traditional Form (GET/POST only) -->
<form method="POST" action="/api/users">
  <input type="text" name="username">
  <button type="submit">Submit</button>
</form>

<!-- Ajax way (supports all HTTP methods) -->
<script>
const submitData = async () => {
  const response = await fetch('/api/users', {
    method: 'PUT', // or any other method
    body: JSON.stringify({
      username: document.querySelector('input').value
    })
  });
}
</script>
Node.js 프로젝트 설정
bash

Copy
# 프로젝트 초기화
npm init -y

# faker 설치 (개발 의존성으로)
npm install -D @faker-js/faker

# 사용 예제
import { faker } from '@faker-js/faker';
const randomName = faker.person.fullName();
REST API 주요 특징
javascript

Copy
// GET 요청 (body 없음)
fetch('/api/users')

// PUT 요청 (body 있음)
fetch('/api/users/1', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  },
  body: JSON.stringify({
    name: '홍길동',
    age: 25
  })
})
객체 복제
javascript

Copy
// 얕은 복제
const original = { name: 'John', age: 25 };
const shallowCopy = { ...original };

// 깊은 복제
const deepCopy = JSON.parse(JSON.stringify(original));

// 객체 복제 (Java)
public class User implements Cloneable {
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
DOM 조작
javascript

Copy
// 부모-자식 관계 탐색
const parent = document.querySelector('.parent');
const children = parent.children;
const firstChild = parent.firstElementChild;

// 특정 요소 선택
const specific = document.querySelector('#specific');
const all = document.querySelectorAll('.items');
템플릿 문자열
javascript

Copy
const name = '홍길동';
const age = 25;
const message = `안녕하세요, ${name}님! 
당신의 나이는 ${age}세 입니다.`;
직렬화와 역직렬화
java

Copy
// Java 객체 → JSON (직렬화)
ObjectMapper mapper = new ObjectMapper();
String json = mapper.writeValueAsString(userObject);

// JSON → Java 객체 (역직렬화)
User user = mapper.readValue(json, User.class);