//______________________________________1021
인코딩 함수 진화: escape → encodeURI → encodeURIComponent
디코딩 함수 진화: unescape → decodeURI → decodeURIComponent
역산 가능한 인코딩은 보안에 부적절

    

//______________________________________1022
직렬화의 목적: 데이터 경량화
홈 태그/사용자 입력 처리 중요성

//______________________________________1023

session, 스니펫 개념
ajax의 중요성 강조
MongoDB에서 splice 객체 활용
split 메서드의 중요성
forward vs redirect 차이
input type="hidden" 활용

//______________________________________1024

페이지 전환 방식 비교:

Forward: 서버 내부 전환 (URL 변경 없음)
Redirect: 클라이언트 측 전환 (URL 변경됨)


input type="hidden" 활용법

//______________________________________1025

개발자 구분:

Engineer: 설계 중심
Developer: 개발 중심
Coder: 코딩 중심

//______________________________________1028    

1. JavaScript Array

sort 콜백 함수의 중요성
closest 선택자를 통한 DOM 탐색

2. 비동기 통신

AJAX의 중요성 (React/SPA 필수)
비동기 처리 방식 진화:

전통적 AJAX
jQuery AJAX
fetch API
axios 라이브러리



3. HTTP 메서드

GET: 데이터 조회 (URL에 노출)
POST: 데이터 전송 (Body에 포함)

4. Promise/async/await

비동기 처리의 현대적 방식
코드 가독성 향상

//______________________________________1029

stack vs heap 메모리 구조
개발 원칙:

KISS (Keep It Simple, Stupid)
DRY (Don't Repeat Yourself)


비동기 처리의 제한 사항
Cross-Origin 개념과 구성요소

//______________________________________1030

axios 라이브러리 등장 배경
async/await의 특징과 제한사항 (함수 생성/호출 필요)


async / await는
항상 함수를 만들고, 호출해야하는 단점이 있다.

//______________________________________1105

==========자바스크립트 중요하다고 생각하는 거 ==========

원시타입(복사) vs 참조타입(별명) 구분!!!
함수(매개변수 리턴) ,call / apply / bind(고급스러워보인다)
비동기
// 브라우져에서 돌아가기 때문에
DOM 제어 중요 =>
    서치 : querySelector(), querySelectorAll()
    생성 : createElement()
    문서에 붙이는 거 : append() / appendChild() => 이동
    삭제 : remove() / remove Child()
    * : closest("가장 가까운 거")
    css 선택자 /display / position / overflow / z-index / tranform
    레이아웃 : flex / grid


prototype? 나중에 해도 된다, localStorage / sessionStorage

AJAX - 원본 /jquery AJAX / fetch / axios    
fetch / axios 둘 중 하나는 꼭 알아야 한다 + promise + async / await

callback 눈에 익힙시다!!(함수의 매개변수로 함수가 넘어갔을 때)
