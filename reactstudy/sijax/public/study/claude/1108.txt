1. 아키텍처 관련

MSP (Micro Service Pattern)

맵 서버 분리
DB 서버 분리


Namespace: 이름 중복 방지를 위해 역순으로 작성


2. 개발 환경

전자정부 프레임워크: 이클립스 사용이 필수가 아님 (권장사항만 준수)
pom.xml 필요 (Spring 프로젝트 필수)
HTML/CSS는 웹에서 정적 파일로 처리


3. 데이터베이스 연동

Connection Pool Tools:

Apache Commons DB 2
HikariCP (성능 향상을 위한 미리 생성된 연결)


MyBatis 설정:
mybatis.configuration.map-underscore-to-camel-case=true 
mybatis.configuration.jdbc-type-for-null=varchar
mybatis.type-aliases-package=com.sumin.just.vo
mybatis.mapper-locations=classpath:mybatis/mapper/*-Mapper.xml


4. CRUD 개발 순서
DB → Mapper → Service → Controller


5. VO(Value Object) 설계


private 필드 사용 이유: 데이터 유효성 검증

setAge(int age) {
    if(age > 100) {
        // 유효성 검증 로직
    }
}

주요 어노테이션:
@Data
@Getter  // 권장
@Setter  // 권장
@ToString // 디버깅용


6. Mapper 구현

기본 5개 메서드 구현:

단일 조회
목록 조회
생성
수정
삭제


7. 테스트 코드 작성

@Slf4j
@SpringBootTest
public class IdolMapperTest {
    @Autowired
    private IdolMapper idolMapper;

    @Test
    public void insIdolTest() {
        int sum = 0;
        IdolVO idol = new IdolVO();
        for(int i=1; i<=10; i++) {
            idol = new IdolVO();
            idol.setIdolName("수민"+i+"돌");
            idol.setIdolAge(20+i);
            idol.setIdolSajin("사진 없대"+i);
            sum += idolMapper.insIdol(idol);
        }
        assertEquals(10, sum);
    }
}

8. 유용한 팁

MyBatis 실행 SQL문을 복사하여 SQL Developer에서 바로 사용 가능
private 필드 사용을 습관화
테스트 코드 작성 시 assertEquals(기대값, 실제값) 활용


9.주의사항

Java와 Oracle의 null 처리 방식 차이 인지
Mapper 테스트는 구현 후 즉시 수행 권장