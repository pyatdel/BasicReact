1. 메인 진입점 (index.jsx)
이 파일은 React Query 클라이언트를 설정하고 전체 앱을 감싸는 역할을 합니다:

import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const hiphopClient = new QueryClient()

createRoot(document.getElementById('root')).render(
  <QueryClientProvider client={hiphopClient}>
    <App />
  </QueryClientProvider>
)


QueryClient 인스턴스를 생성합니다
QueryClientProvider로 전체 앱을 감싸서 어디서든 React Query를 사용할 수 있게 합니다
React 18의 createRoot API를 사용합니다


2. Todo 컴포넌트 (Todo.jsx)
개별 할일 항목을 표시하고 삭제 기능을 담당하는 컴포넌트입니다:


function Todo({todo}) {
  const queryClient = useQueryClient()
  
  const handleDelete = () => {
    delmute.mutate()
  }
  
  const delTodo = async () => {
    const response = await axios.delete(`http://localhost:8080/todos/${todo.todoId}`)
    return response.data
  }
  
  const delmute = useMutation({
    mutationFn: delTodo,
    onSuccess: () => {
      // 삭제 성공 시 todos 쿼리를 무효화하여 목록을 다시 불러옵니다
      queryClient.invalidateQueries({ queryKey: ['todos'] })
    },
  })
  
  return (
    <div style={{display: "flex", justifyContent: "space-between"}}>
      <h6>{todo.todoTitle}</h6>
      <button onClick={handleDelete}>삭제</button>
    </div>
  )
}


useMutation을 사용하여 삭제 작업을 처리합니다
삭제 성공 시 todos 쿼리를 무효화하여 목록이 자동으로 갱신되게 합니다
할일 제목과 삭제 버튼을 포함한 간단한 UI를 제공합니다


3. TodoList 컴포넌트 (TodoList.jsx)
할일 목록을 관리하고 새로운 할일을 추가하는 기능을 담당합니다:


function TodoList() {
  const queryClient = useQueryClient()
  const jcTxt = useRef(null)
  
  // 할일 목록을 가져오는 함수
  const getTodos = async () => {
    const response = await axios.get("http://localhost:8080/todos")
    return response.data
  }
  
  // useQuery로 할일 목록을 가져옵니다
  const {data} = useQuery({
    queryKey: ['todos'],
    queryFn: getTodos
  })
  
  // 새로운 할일을 추가하는 함수
  const postTodo = async (todo) => {
    const response = await axios.post("http://localhost:8080/todos", todo)
    return response.data
  }
  
  const handleAdd = () => {
    inmute.mutate({
      todoId: data.length + 1,
      todoTitle: jcTxt.current.value
    })
    jcTxt.current.value = ""
    jcTxt.current.focus()
  }
  
  const inmute = useMutation({
    mutationFn: postTodo,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['todos'] })
    },
  })
  
  useEffect(() => {
    jcTxt.current.focus()
  }, [])
  
  return (
    <div>
      {data?.map((todo) => <Todo key={todo.todoId} todo={todo} />)}
      <input 
        type='text' 
        ref={jcTxt}
        style={{border: "1px solid black"}}
        defaultValue={"작성하세요"}
      />
      <button onClick={handleAdd}>할일 추가</button>
    </div>
  )
}


useQuery로 할일 목록을 가져옵니다
useMutation으로 새로운 할일 추가를 처리합니다
useRef로 입력창 포커스를 관리합니다
할일 목록을 매핑하여 Todo 컴포넌트들을 렌더링합니다


React Query 주요 개념

QueryClient

캐시 관리
데이터 리페칭
서버 상태 업데이트를 담당하는 중앙 관리자


useQuery

데이터를 가져오는 훅
queryKey: 쿼리를 식별하는 고유 키
queryFn: 실제 데이터를 가져오는 함수


useMutation

데이터를 수정하는 훅
mutationFn: 실제 수정 작업을 수행하는 함수
onSuccess: 수정 성공 후 실행할 콜백


invalidateQueries

쿼리를 무효화하고 데이터를 다시 가져오게 하는 메서드



API 엔드포인트
애플리케이션이 사용하는 API 엔드포인트:

GET /todos - 전체 할일 목록 조회
POST /todos - 새로운 할일 생성
DELETE /todos/:id - 특정 할일 삭제