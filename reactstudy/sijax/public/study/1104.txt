CSS 핵심 속성들:

/* 스크롤 관련 */
overflow: scroll;  /* 스크롤바 항상 표시 */
overflow: auto;   /* 필요할 때만 스크롤바 표시 */

/* 위치 설정 */
position: absolute;  /* 절대 위치 지정 */

/* 현대적인 레이아웃 시스템 */
display: flex;     /* 유연한 1차원 레이아웃 */
display: grid;     /* 강력한 2차원 레이아웃 */
display: none;     /* 요소 숨기기 */

/* 변형 */
transform: rotate(45deg);  /* 요소 회전 */

/* 레이어 순서 */
z-index: 999;  /* 숫자가 클수록 앞에 표시 */

/* 투명도 */
opacity: 0.5;  /* 0(완전 투명) ~ 1(완전 불투명) */

RESTful API 주요 메서드:

// RESTful 서버 통신의 주요 메서드들
GET     // 데이터 조회
POST    // 새로운 데이터 생성
PUT     // 데이터 전체 수정
DELETE  // 데이터 삭제

모달창 구현 핵심:

// 모달창 기본 구조
<div class="modal-overlay">  // 배경 어둡게
  <div class="modal-content"> // 실제 모달 내용
    // 내용물
  </div>
</div>

// CSS 예시
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5); // 배경 반투명
  z-index: 1000;
}

.modal-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  z-index: 1001;
}

bind vs call 차이점:

function example() {
  console.log(this.name);
}

const person = { name: "홍길동" };

// call: 즉시 함수 실행
example.call(person);  // 출력: "홍길동"

// bind: 새로운 함수 생성 (나중에 실행 가능)
const boundFunction = example.bind(person);
boundFunction();  // 출력: "홍길동"

/*
주요 차이점:
- call: 함수를 즉시 실행
- bind: 새로운 함수를 생성만 하고 반환
  (실제로 내부적으로 새로운 함수를 만들어서 반환)
*/

추가 팁:


모달창 구현 시 opacity로 배경 처리하면 UX 향상
open 대신 모달 기능 구현에 집중하는 것이 실무에 더 유용
z-index는 큰 숫자가 앞으로 나오므로 모달은 높은 값 사용
display: flex와 grid는 현대적 웹 개발의 필수 요소

교재
28pg html
32 pg spa single page application
33pg css
34pg 자바스크립트는 동적언어 // 자바와 상관이 없다!
자바스크립트 자료형 number string boolean, undefined, null.. 데이터 타입이 많지 않다
39pg 자바스크립트 연산자, 실무자는 연잔자 우선순위보다, ()를 사용해서 정한다


e7e 시베리안허스키 게시물 정독하면 -->? 최소2년차

javascript는 초보자용 책은 좋은 게 많이 없다. > HTML/css/JS
	그런데 중급자용부턴 좋은 게 많이 있다.

jstree는 다른 것보다 연습을 더 해야 한다